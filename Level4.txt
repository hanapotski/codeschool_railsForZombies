CONTROLLERS BRAINS OF THE APPLICATION

Controller
- brains that control our models and views
- use models to get data out of database
- use views to display data that comes out of the models

Application Stack
model, views, controllers

Show a Tweet
app/views/tweets/show.html.erb

Request /tweets/1
app/controllers/tweets_controller.rb
- render show view

Convention over Configuration
- name of controller, view, model

methods and actions
- same
- show

Variable scope
- tweet variable
- @ instance variables, to grant view access to variables with @

render action: 'status'
- render different html, status.html.erb

@tweet = Tweet.find(params[:id])
- contains value passed in
- recipe: params { id: "1"}

Parameters
/tweets?status=I'm dead
- standard URL query parameters

Rails parameters
params = { status: "I'm dead" }
@tweet = Tweet.create(status: params[:status])
- contains hash of the value passed in
- to access => params[:id]

/tweets?tweet[status]=I'm dead
params = { tweet: {status: "I'm dead" }}
@tweet = Tweet.create(status: params[:tweet][:status])

Alternate Syntax
@tweet = Tweet.create(params[:tweet])
- tweet meethod expects a hash

Strong Parameters - rails 4
- makes code more secure
- specify parameter key we require
require(:tweet)
- specify attributes will permit to be set
permit(:status)

@tweet = Tweet.create(params.require(:tweet).permit(:status))

If there were multiple things we needed to permit, we could use an array
params.require(:tweet).permit([:status, :location])

@tweet = Tweet.create(params[:tweet])

Strong Params Required only when:
CREATING or UPDATING
with MULTIPLE Attributes


Use rails
- to create backend APIs

Respond with HTML or JSON or XML
tweets/1.json

respond_to do |format|
format.html # show.html.erb
format.json { render json: @tweet }
format.xml { render xml: @tweet


Controller Actions
/app/controllers/tweets_controller.rb

class TweetsController < ApplicationController
  def show      List all tweets
  def index     Show a single tweet
  def edit      Show a new tweet form
  def create    Show an edit tweet form
  def update    Create a new tweet
  def destroy   Update a tweet
  def new       Delete a tweet
end

The Edit Action
/app/controllers/tweets_controller.rb
def edit
  @tweet = Tweet.find(params[:id])
end

Adding Some Authorization
Redirect and Flash

/app/controllers/tweets_controller.rb
class TweetsController < ApplicationController
  def edit
    @tweet = Tweet.find(params[:id])
    if session[:zombie_id] != @tweet.zombie_id
      flash[:notice] ="Sorry, you can’t edit this tweet"
      redirect_to(tweets_path)
    end
  end
end

helper hashes
session          Works like a per user hash
flash[:notice]   To send messages to the user
redirect <path>  To redirect the request

Alternate Recipe:
redirect_to(tweets_path,
:notice =>"Sorry, you can’t edit this tweet")


Notice for Layouts
/app/views/layouts/application.html.erb

<!DOCTYPE html>
 <head>
 <title>Twitter for Zombies</title>
 </head>
 <body>
 <img src="/images/twitter.png" />
  <% if flash[:notice] %>
  <div id="notice"><%= flash[:notice] %></div>
  <% end %>
 <%= yield %>
 </body>

Adding Some Authorization
- edit, update, destroy
- needs authorization

Before Actions
before_action :get_tweet , only: [:edit, :update, :destroy]

def get_tweet
@tweet = Tweet.find(params[:id])

before_action :check_auth , :only => [:edit, :update, :destroy]
def check_auth
  if session[:zombie_id] != @tweet.zombie_id
  flash[:notice] = "Sorry, you can’t edit this tweet"
  redirect_to tweets_path
end

- dry up code, eliminate duplication
